/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * ABCProduct
 * ABCProduct API
 *
 * OpenAPI spec version: 0.1.9
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:8080".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration!: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name!: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Stocks
 */
export interface Stocks {
    /**
     * 
     * @type {number}
     * @memberof Stocks
     */
    productId?: number;
    /**
     * 
     * @type {string}
     * @memberof Stocks
     */
    productName?: string;
    /**
     * 
     * @type {number}
     * @memberof Stocks
     */
    productPrice?: number;
    /**
     * 
     * @type {number}
     * @memberof Stocks
     */
    stockCount?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Stocks
     */
    stockIn?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Stocks
     */
    stockOut?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Stocks
     */
    warehouseId?: number;
    /**
     * 
     * @type {string}
     * @memberof Stocks
     */
    warehouseName?: string;
    /**
     * 
     * @type {string}
     * @memberof Stocks
     */
    warehouseAddress?: string;
}
/**
 * StockApi - fetch parameter creator
 * @export
 */
export const StockApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 商品を各テーブルに1件登録する
         * @summary 商品登録情報
         * @param {Stocks} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockAddPost(body?: Stocks, options: any = {}): FetchArgs {
            const localVarPath = `/stock/add`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Stocks" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDと一致する削除
         * @summary IDと一致する削除
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockDetailProductIdDelete(productId: number, options: any = {}): FetchArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling stockDetailProductIdDelete.');
            }
            const localVarPath = `/stock/detail/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDと一致する商品
         * @summary IDと一致する商品
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockDetailProductIdGet(productId: number, options: any = {}): FetchArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling stockDetailProductIdGet.');
            }
            const localVarPath = `/stock/detail/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 全ての商品表示
         * @summary 全ての商品表示
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockGet(options: any = {}): FetchArgs {
            const localVarPath = `/stock`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * keywordで検索する
         * @summary keywordで検索する
         * @param {string} keyword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockKeywordGet(keyword: string, options: any = {}): FetchArgs {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling stockKeywordGet.');
            }
            const localVarPath = `/stock/{keyword}`
                .replace(`{${"keyword"}}`, encodeURIComponent(String(keyword)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StockApi - functional programming interface
 * @export
 */
export const StockApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 商品を各テーブルに1件登録する
         * @summary 商品登録情報
         * @param {Stocks} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockAddPost(body?: Stocks, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Stocks> {
            const localVarFetchArgs = StockApiFetchParamCreator(configuration).stockAddPost(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * IDと一致する削除
         * @summary IDと一致する削除
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockDetailProductIdDelete(productId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Stocks> {
            const localVarFetchArgs = StockApiFetchParamCreator(configuration).stockDetailProductIdDelete(productId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * IDと一致する商品
         * @summary IDと一致する商品
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockDetailProductIdGet(productId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Stocks> {
            const localVarFetchArgs = StockApiFetchParamCreator(configuration).stockDetailProductIdGet(productId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 全ての商品表示
         * @summary 全ての商品表示
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Stocks> {
            const localVarFetchArgs = StockApiFetchParamCreator(configuration).stockGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * keywordで検索する
         * @summary keywordで検索する
         * @param {string} keyword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockKeywordGet(keyword: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Stocks> {
            const localVarFetchArgs = StockApiFetchParamCreator(configuration).stockKeywordGet(keyword, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * StockApi - factory interface
 * @export
 */
export const StockApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 商品を各テーブルに1件登録する
         * @summary 商品登録情報
         * @param {Stocks} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockAddPost(body?: Stocks, options?: any) {
            return StockApiFp(configuration).stockAddPost(body, options)(fetch, basePath);
        },
        /**
         * IDと一致する削除
         * @summary IDと一致する削除
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockDetailProductIdDelete(productId: number, options?: any) {
            return StockApiFp(configuration).stockDetailProductIdDelete(productId, options)(fetch, basePath);
        },
        /**
         * IDと一致する商品
         * @summary IDと一致する商品
         * @param {number} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockDetailProductIdGet(productId: number, options?: any) {
            return StockApiFp(configuration).stockDetailProductIdGet(productId, options)(fetch, basePath);
        },
        /**
         * 全ての商品表示
         * @summary 全ての商品表示
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockGet(options?: any) {
            return StockApiFp(configuration).stockGet(options)(fetch, basePath);
        },
        /**
         * keywordで検索する
         * @summary keywordで検索する
         * @param {string} keyword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockKeywordGet(keyword: string, options?: any) {
            return StockApiFp(configuration).stockKeywordGet(keyword, options)(fetch, basePath);
        },
    };
};

/**
 * StockApi - object-oriented interface
 * @export
 * @class StockApi
 * @extends {BaseAPI}
 */
export class StockApi extends BaseAPI {
    /**
     * 商品を各テーブルに1件登録する
     * @summary 商品登録情報
     * @param {Stocks} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    public stockAddPost(body?: Stocks, options?: any) {
        return StockApiFp(this.configuration).stockAddPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * IDと一致する削除
     * @summary IDと一致する削除
     * @param {number} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    public stockDetailProductIdDelete(productId: number, options?: any) {
        return StockApiFp(this.configuration).stockDetailProductIdDelete(productId, options)(this.fetch, this.basePath);
    }

    /**
     * IDと一致する商品
     * @summary IDと一致する商品
     * @param {number} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    public stockDetailProductIdGet(productId: number, options?: any) {
        return StockApiFp(this.configuration).stockDetailProductIdGet(productId, options)(this.fetch, this.basePath);
    }

    /**
     * 全ての商品表示
     * @summary 全ての商品表示
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    public stockGet(options?: any) {
        return StockApiFp(this.configuration).stockGet(options)(this.fetch, this.basePath);
    }

    /**
     * keywordで検索する
     * @summary keywordで検索する
     * @param {string} keyword 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StockApi
     */
    public stockKeywordGet(keyword: string, options?: any) {
        return StockApiFp(this.configuration).stockKeywordGet(keyword, options)(this.fetch, this.basePath);
    }

}
